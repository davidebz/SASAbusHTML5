/*********************************************************************************
 *                                                                               *
 * WARNING: File automatically generated by DMXmlJson. DON'T CHANGE IT manually! *
 *                                                                               *
 *********************************************************************************/

package bz.davide.dmweb.shared.view;


public class SASAbusWebPageReader_Helper extends bz.davide.dmxmljson.unmarshalling.Unmarshaller
{
   protected SASAbusWebPageReader_Helper()
   {
      this.emptyObjectCheck.put("bz.davide.dmweb.shared.view.DMWebPage", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<bz.davide.dmweb.shared.view.DMWebPage>() {
         @Override public void check(bz.davide.dmweb.shared.view.DMWebPage  ret){
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.view.DMWebPage", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmweb.shared.view.DMWebPage();
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.view.DMWebPage", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // BodyContent
            if ((value = structure.property("BodyContent")) != null)
               if (value.isNull())
                  ((bz.davide.dmweb.shared.view.DMWebPage)obj).setBodyContent(null);
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  arr.open();        
                  bz.davide.dmweb.shared.view.AbstractHtmlElementView[] arrayList = new bz.davide.dmweb.shared.view.AbstractHtmlElementView[arr.length()];       
                  for (int i = 0; i < arrayList.length; i++) {                       
                     value = arr.nextItem();                                       
                     if (value.isNull())                                           
                        arrayList[i] = null;                                       
                     else                                                          
                     {                                                                   
                        bz.davide.dmxmljson.unmarshalling.Structure tmpStructure = value.structure();
                        String refid = tmpStructure.getRefId();    
                        if (refid != null)                              
                           arrayList[i] = (bz.davide.dmweb.shared.view.AbstractHtmlElementView)(identities.get(refid));                                                
                        else {
                           Object o = newInstance(tmpStructure.getRuntimeClassName("AbstractHtmlElementView"));              
                           internalUnmarschall(tmpStructure, o.getClass().getName(), o, identities); 
                           arrayList[i] = (bz.davide.dmweb.shared.view.AbstractHtmlElementView)(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  arr.close();        
                  ((bz.davide.dmweb.shared.view.DMWebPage)obj).setBodyContent(arrayList);
               }
            // Title
            if ((value = structure.property("Title")) != null)
               if (value.isNull())
                  ((bz.davide.dmweb.shared.view.DMWebPage)obj).setTitle(null);
               else
               {
                  ((bz.davide.dmweb.shared.view.DMWebPage)obj).setTitle(value.string());
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("bz.davide.dmweb.shared.view.AbstractHtmlElementView", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<bz.davide.dmweb.shared.view.AbstractHtmlElementView>() {
         @Override public void check(bz.davide.dmweb.shared.view.AbstractHtmlElementView  ret){
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.view.AbstractHtmlElementView", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return null;
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.view.AbstractHtmlElementView", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // StyleName
            if ((value = structure.property("StyleName")) != null)
               if (value.isNull())
                  ((bz.davide.dmweb.shared.view.AbstractHtmlElementView)obj).setStyleName(null);
               else
               {
                  ((bz.davide.dmweb.shared.view.AbstractHtmlElementView)obj).setStyleName(value.string());
               }
            structure.close();
         }
      });

   }
}
