/*********************************************************************************
 *                                                                               *
 * WARNING: File automatically generated by DMXmlJson. DON'T CHANGE IT manually! *
 *                                                                               *
 *********************************************************************************/

package bz.davide.dmweb.shared;


public class SASAbusWebPageReader_Helper extends bz.davide.dmxmljson.unmarshalling.Unmarshaller
{
   protected SASAbusWebPageReader_Helper()
   {
      this.putInstanceFactory("bz.davide.dmweb.shared.DMWebPage", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmweb.shared.DMWebPage();
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.DMWebPage", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // BodyContent
            if ((value = structure.property("BodyContent")) != null)
               if (value.isNull())
                  ((DMWebPage)obj).setBodyContent(null);
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("DMWidget"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((DMWebPage)obj).setBodyContent((bz.davide.dmweb.shared.DMWidget[])arrayList.toArray(new bz.davide.dmweb.shared.DMWidget[0]));
               }
            // Title
            if ((value = structure.property("Title")) != null)
               if (value.isNull())
                  ((DMWebPage)obj).setTitle(null);
               else
               {
                  ((DMWebPage)obj).setTitle(value.string());
               }
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.DMWidget", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return null;
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.DMWidget", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // ElementInnerHtml
            if ((value = structure.property("ElementInnerHtml")) != null)
               if (value.isNull())
                  ((DMWidget)obj).setElementInnerHtml(null);
               else
               {
                  ((DMWidget)obj).setElementInnerHtml(value.string());
               }
            // ElementInnerText
            if ((value = structure.property("ElementInnerText")) != null)
               if (value.isNull())
                  ((DMWidget)obj).setElementInnerText(null);
               else
               {
                  ((DMWidget)obj).setElementInnerText(value.string());
               }
            // StyleName
            if ((value = structure.property("StyleName")) != null)
               if (value.isNull())
                  ((DMWidget)obj).setStyleName(null);
               else
               {
                  ((DMWidget)obj).setStyleName(value.string());
               }
         }
      });

   }
}
