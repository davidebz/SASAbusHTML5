/*********************************************************************************
 *                                                                               *
 * WARNING: File automatically generated by DMXmlJson. DON'T CHANGE IT manually! *
 *                                                                               *
 *********************************************************************************/

package it.bz.tis.sasabus.backend.shared.travelplanner;


public class SASAbusBackendUnmarshaller_Helper extends it.bz.tis.sasabus.backend.shared.SASAbusBackendUnmarshaller_Helper
{
   protected SASAbusBackendUnmarshaller_Helper()
   {
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.ReqC", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.ReqC>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.ReqC  ret){
            // ConReq
            if (ret.ConReq != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ReqC.ConReq");
            // ConScrReq
            if (ret.ConScrReq != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ReqC.ConScrReq");
            // LocValReq
            if (ret.LocValReq != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ReqC.LocValReq");
            // accessId
            if (ret.accessId != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ReqC.accessId");
            // lang
            if (ret.lang != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ReqC.lang");
            // prod
            if (ret.prod != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ReqC.prod");
            // ver
            if (ret.ver != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ReqC.ver");
            // xmlns__xsi
            if (ret.xmlns__xsi != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ReqC.xmlns__xsi");
            // xsi__noNamespaceSchemaLocation
            if (ret.xsi__noNamespaceSchemaLocation != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ReqC.xsi__noNamespaceSchemaLocation");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.ReqC", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.ReqC ret = new it.bz.tis.sasabus.backend.shared.travelplanner.ReqC();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.ReqC").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.ReqC", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // ConReq
            if ((value = structure.property("ConReq")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqC)obj).ConReq = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  arr.open();        
                  it.bz.tis.sasabus.backend.shared.travelplanner.ConReq[] arrayList = new it.bz.tis.sasabus.backend.shared.travelplanner.ConReq[arr.length()];       
                  for (int i = 0; i < arrayList.length; i++) {                       
                     value = arr.nextItem();                                       
                     if (value.isNull())                                           
                        arrayList[i] = null;                                       
                     else                                                          
                     {                                                                   
                        bz.davide.dmxmljson.unmarshalling.Structure tmpStructure = value.structure();
                        String refid = tmpStructure.getRefId();    
                        if (refid != null)                              
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.ConReq)(identities.get(refid));                                                
                        else {
                           Object o = newInstance(tmpStructure.getRuntimeClassName("ConReq"));              
                           internalUnmarschall(tmpStructure, o.getClass().getName(), o, identities); 
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.ConReq)(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  arr.close();        
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqC)obj).ConReq = arrayList;
               }
            // ConScrReq
            if ((value = structure.property("ConScrReq")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqC)obj).ConScrReq = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  arr.open();        
                  it.bz.tis.sasabus.backend.shared.travelplanner.ConScrReq[] arrayList = new it.bz.tis.sasabus.backend.shared.travelplanner.ConScrReq[arr.length()];       
                  for (int i = 0; i < arrayList.length; i++) {                       
                     value = arr.nextItem();                                       
                     if (value.isNull())                                           
                        arrayList[i] = null;                                       
                     else                                                          
                     {                                                                   
                        bz.davide.dmxmljson.unmarshalling.Structure tmpStructure = value.structure();
                        String refid = tmpStructure.getRefId();    
                        if (refid != null)                              
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.ConScrReq)(identities.get(refid));                                                
                        else {
                           Object o = newInstance(tmpStructure.getRuntimeClassName("ConScrReq"));              
                           internalUnmarschall(tmpStructure, o.getClass().getName(), o, identities); 
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.ConScrReq)(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  arr.close();        
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqC)obj).ConScrReq = arrayList;
               }
            // LocValReq
            if ((value = structure.property("LocValReq")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqC)obj).LocValReq = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  arr.open();        
                  it.bz.tis.sasabus.backend.shared.travelplanner.LocValReq[] arrayList = new it.bz.tis.sasabus.backend.shared.travelplanner.LocValReq[arr.length()];       
                  for (int i = 0; i < arrayList.length; i++) {                       
                     value = arr.nextItem();                                       
                     if (value.isNull())                                           
                        arrayList[i] = null;                                       
                     else                                                          
                     {                                                                   
                        bz.davide.dmxmljson.unmarshalling.Structure tmpStructure = value.structure();
                        String refid = tmpStructure.getRefId();    
                        if (refid != null)                              
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.LocValReq)(identities.get(refid));                                                
                        else {
                           Object o = newInstance(tmpStructure.getRuntimeClassName("LocValReq"));              
                           internalUnmarschall(tmpStructure, o.getClass().getName(), o, identities); 
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.LocValReq)(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  arr.close();        
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqC)obj).LocValReq = arrayList;
               }
            // accessId
            if ((value = structure.property("accessId")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqC)obj).accessId = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqC)obj).accessId = value.string();
               }
            // lang
            if ((value = structure.property("lang")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqC)obj).lang = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqC)obj).lang = value.string();
               }
            // prod
            if ((value = structure.property("prod")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqC)obj).prod = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqC)obj).prod = value.string();
               }
            // ver
            if ((value = structure.property("ver")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqC)obj).ver = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqC)obj).ver = value.string();
               }
            // xmlns__xsi
            if ((value = structure.property("xmlns__xsi")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqC)obj).xmlns__xsi = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqC)obj).xmlns__xsi = value.string();
               }
            // xsi__noNamespaceSchemaLocation
            if ((value = structure.property("xsi__noNamespaceSchemaLocation")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqC)obj).xsi__noNamespaceSchemaLocation = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqC)obj).xsi__noNamespaceSchemaLocation = value.string();
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.ResC", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.ResC>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.ResC  ret){
            // ConRes
            if (ret.ConRes != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ResC.ConRes");
            // LocValRes
            if (ret.LocValRes != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ResC.LocValRes");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.ResC", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.ResC ret = new it.bz.tis.sasabus.backend.shared.travelplanner.ResC();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.ResC").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.ResC", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // ConRes
            if ((value = structure.property("ConRes")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ResC)obj).ConRes = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  arr.open();        
                  it.bz.tis.sasabus.backend.shared.travelplanner.ConRes[] arrayList = new it.bz.tis.sasabus.backend.shared.travelplanner.ConRes[arr.length()];       
                  for (int i = 0; i < arrayList.length; i++) {                       
                     value = arr.nextItem();                                       
                     if (value.isNull())                                           
                        arrayList[i] = null;                                       
                     else                                                          
                     {                                                                   
                        bz.davide.dmxmljson.unmarshalling.Structure tmpStructure = value.structure();
                        String refid = tmpStructure.getRefId();    
                        if (refid != null)                              
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.ConRes)(identities.get(refid));                                                
                        else {
                           Object o = newInstance(tmpStructure.getRuntimeClassName("ConRes"));              
                           internalUnmarschall(tmpStructure, o.getClass().getName(), o, identities); 
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.ConRes)(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  arr.close();        
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ResC)obj).ConRes = arrayList;
               }
            // LocValRes
            if ((value = structure.property("LocValRes")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ResC)obj).LocValRes = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  arr.open();        
                  it.bz.tis.sasabus.backend.shared.travelplanner.LocValRes[] arrayList = new it.bz.tis.sasabus.backend.shared.travelplanner.LocValRes[arr.length()];       
                  for (int i = 0; i < arrayList.length; i++) {                       
                     value = arr.nextItem();                                       
                     if (value.isNull())                                           
                        arrayList[i] = null;                                       
                     else                                                          
                     {                                                                   
                        bz.davide.dmxmljson.unmarshalling.Structure tmpStructure = value.structure();
                        String refid = tmpStructure.getRefId();    
                        if (refid != null)                              
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.LocValRes)(identities.get(refid));                                                
                        else {
                           Object o = newInstance(tmpStructure.getRuntimeClassName("LocValRes"));              
                           internalUnmarschall(tmpStructure, o.getClass().getName(), o, identities); 
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.LocValRes)(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  arr.close();        
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ResC)obj).LocValRes = arrayList;
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.ConReq", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.ConReq>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.ConReq  ret){
            // Dest
            if (ret.Dest != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ConReq.Dest");
            // RFlags
            if (ret.RFlags != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ConReq.RFlags");
            // ReqT
            if (ret.ReqT != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ConReq.ReqT");
            // Start
            if (ret.Start != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ConReq.Start");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.ConReq", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.ConReq ret = new it.bz.tis.sasabus.backend.shared.travelplanner.ConReq();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.ConReq").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.ConReq", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // Dest
            if ((value = structure.property("Dest")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ConReq)obj).Dest = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.ConReq)obj).Dest = (it.bz.tis.sasabus.backend.shared.travelplanner.ConReqStartDest)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("ConReqStartDest"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.ConReq)obj).Dest = (it.bz.tis.sasabus.backend.shared.travelplanner.ConReqStartDest)o;
                  }
               }
            // RFlags
            if ((value = structure.property("RFlags")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ConReq)obj).RFlags = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.ConReq)obj).RFlags = (it.bz.tis.sasabus.backend.shared.travelplanner.RFlags)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("RFlags"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.ConReq)obj).RFlags = (it.bz.tis.sasabus.backend.shared.travelplanner.RFlags)o;
                  }
               }
            // ReqT
            if ((value = structure.property("ReqT")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ConReq)obj).ReqT = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.ConReq)obj).ReqT = (it.bz.tis.sasabus.backend.shared.travelplanner.ReqT)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("ReqT"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.ConReq)obj).ReqT = (it.bz.tis.sasabus.backend.shared.travelplanner.ReqT)o;
                  }
               }
            // Start
            if ((value = structure.property("Start")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ConReq)obj).Start = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.ConReq)obj).Start = (it.bz.tis.sasabus.backend.shared.travelplanner.ConReqStartDest)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("ConReqStartDest"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.ConReq)obj).Start = (it.bz.tis.sasabus.backend.shared.travelplanner.ConReqStartDest)o;
                  }
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.ConScrReq", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.ConScrReq>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.ConScrReq  ret){
            // ConResCtxt
            if (ret.ConResCtxt != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ConScrReq.ConResCtxt");
            // nrCons
            if (ret.nrCons != 0)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ConScrReq.nrCons");
            // srcDir
            if (ret.srcDir != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ConScrReq.srcDir");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.ConScrReq", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.ConScrReq ret = new it.bz.tis.sasabus.backend.shared.travelplanner.ConScrReq();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.ConScrReq").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.ConScrReq", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // ConResCtxt
            if ((value = structure.property("ConResCtxt")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ConScrReq)obj).ConResCtxt = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  arr.open();        
                  java.lang.String[] arrayList = new java.lang.String[arr.length()];       
                  for (int i = 0; i < arrayList.length; i++) {                       
                     value = arr.nextItem();                                       
                     if (value.isNull())                                           
                        arrayList[i] = null;                                       
                     else                                                          
                        arrayList[i] = (value.string());
                  }                                                                   
                  arr.close();        
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ConScrReq)obj).ConResCtxt = arrayList;
               }
            // nrCons
            if ((value = structure.property("nrCons")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ConScrReq)obj).nrCons = (int)value.integer();
               }
            // srcDir
            if ((value = structure.property("srcDir")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ConScrReq)obj).srcDir = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ConScrReq)obj).srcDir = value.string();
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.LocValReq", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.LocValReq>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.LocValReq  ret){
            // ReqLoc
            if (ret.ReqLoc != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.LocValReq.ReqLoc");
            // id
            if (ret.id != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.LocValReq.id");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.LocValReq", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.LocValReq ret = new it.bz.tis.sasabus.backend.shared.travelplanner.LocValReq();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.LocValReq").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.LocValReq", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // ReqLoc
            if ((value = structure.property("ReqLoc")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.LocValReq)obj).ReqLoc = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.LocValReq)obj).ReqLoc = (it.bz.tis.sasabus.backend.shared.travelplanner.ReqLoc)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("ReqLoc"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.LocValReq)obj).ReqLoc = (it.bz.tis.sasabus.backend.shared.travelplanner.ReqLoc)o;
                  }
               }
            // id
            if ((value = structure.property("id")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.LocValReq)obj).id = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.LocValReq)obj).id = value.string();
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.ConRes", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.ConRes>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.ConRes  ret){
            // ConResCtxt
            if (ret.ConResCtxt != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ConRes.ConResCtxt");
            // ConnectionList
            if (ret.ConnectionList != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ConRes.ConnectionList");
            // dir
            if (ret.dir != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ConRes.dir");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.ConRes", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.ConRes ret = new it.bz.tis.sasabus.backend.shared.travelplanner.ConRes();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.ConRes").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.ConRes", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // ConResCtxt
            if ((value = structure.property("ConResCtxt")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ConRes)obj).ConResCtxt = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  arr.open();        
                  java.lang.String[] arrayList = new java.lang.String[arr.length()];       
                  for (int i = 0; i < arrayList.length; i++) {                       
                     value = arr.nextItem();                                       
                     if (value.isNull())                                           
                        arrayList[i] = null;                                       
                     else                                                          
                        arrayList[i] = (value.string());
                  }                                                                   
                  arr.close();        
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ConRes)obj).ConResCtxt = arrayList;
               }
            // ConnectionList
            if ((value = structure.property("ConnectionList")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ConRes)obj).ConnectionList = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.ConRes)obj).ConnectionList = (it.bz.tis.sasabus.backend.shared.travelplanner.ConnectionList)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("ConnectionList"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.ConRes)obj).ConnectionList = (it.bz.tis.sasabus.backend.shared.travelplanner.ConnectionList)o;
                  }
               }
            // dir
            if ((value = structure.property("dir")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ConRes)obj).dir = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ConRes)obj).dir = value.string();
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.LocValRes", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.LocValRes>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.LocValRes  ret){
            // Station
            if (ret.Station != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.LocValRes.Station");
            // id
            if (ret.id != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.LocValRes.id");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.LocValRes", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.LocValRes ret = new it.bz.tis.sasabus.backend.shared.travelplanner.LocValRes();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.LocValRes").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.LocValRes", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // Station
            if ((value = structure.property("Station")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.LocValRes)obj).Station = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  arr.open();        
                  it.bz.tis.sasabus.backend.shared.travelplanner.Station[] arrayList = new it.bz.tis.sasabus.backend.shared.travelplanner.Station[arr.length()];       
                  for (int i = 0; i < arrayList.length; i++) {                       
                     value = arr.nextItem();                                       
                     if (value.isNull())                                           
                        arrayList[i] = null;                                       
                     else                                                          
                     {                                                                   
                        bz.davide.dmxmljson.unmarshalling.Structure tmpStructure = value.structure();
                        String refid = tmpStructure.getRefId();    
                        if (refid != null)                              
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.Station)(identities.get(refid));                                                
                        else {
                           Object o = newInstance(tmpStructure.getRuntimeClassName("Station"));              
                           internalUnmarschall(tmpStructure, o.getClass().getName(), o, identities); 
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.Station)(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  arr.close();        
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.LocValRes)obj).Station = arrayList;
               }
            // id
            if ((value = structure.property("id")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.LocValRes)obj).id = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.LocValRes)obj).id = value.string();
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.ConReqStartDest", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.ConReqStartDest>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.ConReqStartDest  ret){
            // Prod
            if (ret.Prod != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ConReqStartDest.Prod");
            // Station
            if (ret.Station != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ConReqStartDest.Station");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.ConReqStartDest", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.ConReqStartDest ret = new it.bz.tis.sasabus.backend.shared.travelplanner.ConReqStartDest();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.ConReqStartDest").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.ConReqStartDest", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // Prod
            if ((value = structure.property("Prod")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ConReqStartDest)obj).Prod = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  arr.open();        
                  it.bz.tis.sasabus.backend.shared.travelplanner.Prod[] arrayList = new it.bz.tis.sasabus.backend.shared.travelplanner.Prod[arr.length()];       
                  for (int i = 0; i < arrayList.length; i++) {                       
                     value = arr.nextItem();                                       
                     if (value.isNull())                                           
                        arrayList[i] = null;                                       
                     else                                                          
                     {                                                                   
                        bz.davide.dmxmljson.unmarshalling.Structure tmpStructure = value.structure();
                        String refid = tmpStructure.getRefId();    
                        if (refid != null)                              
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.Prod)(identities.get(refid));                                                
                        else {
                           Object o = newInstance(tmpStructure.getRuntimeClassName("Prod"));              
                           internalUnmarschall(tmpStructure, o.getClass().getName(), o, identities); 
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.Prod)(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  arr.close();        
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ConReqStartDest)obj).Prod = arrayList;
               }
            // Station
            if ((value = structure.property("Station")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ConReqStartDest)obj).Station = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.ConReqStartDest)obj).Station = (it.bz.tis.sasabus.backend.shared.travelplanner.Station)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Station"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.ConReqStartDest)obj).Station = (it.bz.tis.sasabus.backend.shared.travelplanner.Station)o;
                  }
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.RFlags", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.RFlags>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.RFlags  ret){
            // b
            if (ret.b != 0)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.RFlags.b");
            // chExtension
            if (ret.chExtension != 0)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.RFlags.chExtension");
            // f
            if (ret.f != 0)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.RFlags.f");
            // sMode
            if (ret.sMode != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.RFlags.sMode");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.RFlags", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.RFlags ret = new it.bz.tis.sasabus.backend.shared.travelplanner.RFlags();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.RFlags").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.RFlags", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // b
            if ((value = structure.property("b")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.RFlags)obj).b = (int)value.integer();
               }
            // chExtension
            if ((value = structure.property("chExtension")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.RFlags)obj).chExtension = (int)value.integer();
               }
            // f
            if ((value = structure.property("f")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.RFlags)obj).f = (int)value.integer();
               }
            // sMode
            if ((value = structure.property("sMode")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.RFlags)obj).sMode = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.RFlags)obj).sMode = value.string();
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.ReqT", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.ReqT>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.ReqT  ret){
            // a
            if (ret.a != 0)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ReqT.a");
            // date
            if (ret.date != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ReqT.date");
            // time
            if (ret.time != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ReqT.time");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.ReqT", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.ReqT ret = new it.bz.tis.sasabus.backend.shared.travelplanner.ReqT();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.ReqT").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.ReqT", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // a
            if ((value = structure.property("a")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqT)obj).a = (int)value.integer();
               }
            // date
            if ((value = structure.property("date")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqT)obj).date = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqT)obj).date = value.string();
               }
            // time
            if ((value = structure.property("time")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqT)obj).time = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqT)obj).time = value.string();
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.ReqLoc", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.ReqLoc>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.ReqLoc  ret){
            // match
            if (ret.match != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ReqLoc.match");
            // type
            if (ret.type != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ReqLoc.type");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.ReqLoc", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.ReqLoc ret = new it.bz.tis.sasabus.backend.shared.travelplanner.ReqLoc();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.ReqLoc").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.ReqLoc", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // match
            if ((value = structure.property("match")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqLoc)obj).match = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqLoc)obj).match = value.string();
               }
            // type
            if ((value = structure.property("type")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqLoc)obj).type = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ReqLoc)obj).type = value.string();
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.ConnectionList", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.ConnectionList>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.ConnectionList  ret){
            // Connection
            if (ret.Connection != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ConnectionList.Connection");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.ConnectionList", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.ConnectionList ret = new it.bz.tis.sasabus.backend.shared.travelplanner.ConnectionList();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.ConnectionList").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.ConnectionList", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // Connection
            if ((value = structure.property("Connection")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ConnectionList)obj).Connection = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  arr.open();        
                  it.bz.tis.sasabus.backend.shared.travelplanner.Connection[] arrayList = new it.bz.tis.sasabus.backend.shared.travelplanner.Connection[arr.length()];       
                  for (int i = 0; i < arrayList.length; i++) {                       
                     value = arr.nextItem();                                       
                     if (value.isNull())                                           
                        arrayList[i] = null;                                       
                     else                                                          
                     {                                                                   
                        bz.davide.dmxmljson.unmarshalling.Structure tmpStructure = value.structure();
                        String refid = tmpStructure.getRefId();    
                        if (refid != null)                              
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.Connection)(identities.get(refid));                                                
                        else {
                           Object o = newInstance(tmpStructure.getRuntimeClassName("Connection"));              
                           internalUnmarschall(tmpStructure, o.getClass().getName(), o, identities); 
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.Connection)(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  arr.close();        
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ConnectionList)obj).Connection = arrayList;
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.Station", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.Station>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.Station  ret){
            // externalId
            if (ret.externalId != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.Station.externalId");
            // externalStationNr
            if (ret.externalStationNr != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.Station.externalStationNr");
            // name
            if (ret.name != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.Station.name");
            // type
            if (ret.type != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.Station.type");
            // x
            if (ret.x != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.Station.x");
            // y
            if (ret.y != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.Station.y");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.Station", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.Station ret = new it.bz.tis.sasabus.backend.shared.travelplanner.Station();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.Station").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.Station", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // externalId
            if ((value = structure.property("externalId")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Station)obj).externalId = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Station)obj).externalId = value.string();
               }
            // externalStationNr
            if ((value = structure.property("externalStationNr")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Station)obj).externalStationNr = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Station)obj).externalStationNr = value.string();
               }
            // name
            if ((value = structure.property("name")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Station)obj).name = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Station)obj).name = value.string();
               }
            // type
            if ((value = structure.property("type")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Station)obj).type = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Station)obj).type = value.string();
               }
            // x
            if ((value = structure.property("x")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Station)obj).x = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Station)obj).x = value.string();
               }
            // y
            if ((value = structure.property("y")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Station)obj).y = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Station)obj).y = value.string();
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.Prod", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.Prod>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.Prod  ret){
            // bike
            if (ret.bike != 0)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.Prod.bike");
            // couchette
            if (ret.couchette != 0)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.Prod.couchette");
            // direct
            if (ret.direct != 0)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.Prod.direct");
            // sleeper
            if (ret.sleeper != 0)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.Prod.sleeper");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.Prod", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.Prod ret = new it.bz.tis.sasabus.backend.shared.travelplanner.Prod();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.Prod").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.Prod", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // bike
            if ((value = structure.property("bike")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Prod)obj).bike = (int)value.integer();
               }
            // couchette
            if ((value = structure.property("couchette")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Prod)obj).couchette = (int)value.integer();
               }
            // direct
            if ((value = structure.property("direct")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Prod)obj).direct = (int)value.integer();
               }
            // sleeper
            if ((value = structure.property("sleeper")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Prod)obj).sleeper = (int)value.integer();
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.Connection", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.Connection>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.Connection  ret){
            // ConSectionList
            if (ret.ConSectionList != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.Connection.ConSectionList");
            // Overview
            if (ret.Overview != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.Connection.Overview");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.Connection", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.Connection ret = new it.bz.tis.sasabus.backend.shared.travelplanner.Connection();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.Connection").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.Connection", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // ConSectionList
            if ((value = structure.property("ConSectionList")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Connection)obj).ConSectionList = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.Connection)obj).ConSectionList = (it.bz.tis.sasabus.backend.shared.travelplanner.ConSectionList)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("ConSectionList"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.Connection)obj).ConSectionList = (it.bz.tis.sasabus.backend.shared.travelplanner.ConSectionList)o;
                  }
               }
            // Overview
            if ((value = structure.property("Overview")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Connection)obj).Overview = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.Connection)obj).Overview = (it.bz.tis.sasabus.backend.shared.travelplanner.Overview)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Overview"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.Connection)obj).Overview = (it.bz.tis.sasabus.backend.shared.travelplanner.Overview)o;
                  }
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.ConSectionList", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.ConSectionList>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.ConSectionList  ret){
            // ConSection
            if (ret.ConSection != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ConSectionList.ConSection");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.ConSectionList", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.ConSectionList ret = new it.bz.tis.sasabus.backend.shared.travelplanner.ConSectionList();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.ConSectionList").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.ConSectionList", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // ConSection
            if ((value = structure.property("ConSection")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ConSectionList)obj).ConSection = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  arr.open();        
                  it.bz.tis.sasabus.backend.shared.travelplanner.ConSection[] arrayList = new it.bz.tis.sasabus.backend.shared.travelplanner.ConSection[arr.length()];       
                  for (int i = 0; i < arrayList.length; i++) {                       
                     value = arr.nextItem();                                       
                     if (value.isNull())                                           
                        arrayList[i] = null;                                       
                     else                                                          
                     {                                                                   
                        bz.davide.dmxmljson.unmarshalling.Structure tmpStructure = value.structure();
                        String refid = tmpStructure.getRefId();    
                        if (refid != null)                              
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.ConSection)(identities.get(refid));                                                
                        else {
                           Object o = newInstance(tmpStructure.getRuntimeClassName("ConSection"));              
                           internalUnmarschall(tmpStructure, o.getClass().getName(), o, identities); 
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.ConSection)(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  arr.close();        
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ConSectionList)obj).ConSection = arrayList;
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.Overview", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.Overview>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.Overview  ret){
            // Arrival
            if (ret.Arrival != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.Overview.Arrival");
            // Departure
            if (ret.Departure != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.Overview.Departure");
            // Duration
            if (ret.Duration != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.Overview.Duration");
            // Transfers
            if (ret.Transfers != 0)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.Overview.Transfers");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.Overview", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.Overview ret = new it.bz.tis.sasabus.backend.shared.travelplanner.Overview();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.Overview").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.Overview", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // Arrival
            if ((value = structure.property("Arrival")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Overview)obj).Arrival = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.Overview)obj).Arrival = (it.bz.tis.sasabus.backend.shared.travelplanner.Arrival)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Arrival"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.Overview)obj).Arrival = (it.bz.tis.sasabus.backend.shared.travelplanner.Arrival)o;
                  }
               }
            // Departure
            if ((value = structure.property("Departure")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Overview)obj).Departure = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.Overview)obj).Departure = (it.bz.tis.sasabus.backend.shared.travelplanner.Departure)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Departure"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.Overview)obj).Departure = (it.bz.tis.sasabus.backend.shared.travelplanner.Departure)o;
                  }
               }
            // Duration
            if ((value = structure.property("Duration")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Overview)obj).Duration = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.Overview)obj).Duration = (it.bz.tis.sasabus.backend.shared.travelplanner.Duration)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Duration"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.Overview)obj).Duration = (it.bz.tis.sasabus.backend.shared.travelplanner.Duration)o;
                  }
               }
            // Transfers
            if ((value = structure.property("Transfers")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Overview)obj).Transfers = (int)value.integer();
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.ConSection", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.ConSection>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.ConSection  ret){
            // Journey
            if (ret.Journey != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ConSection.Journey");
            // Walk
            if (ret.Walk != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.ConSection.Walk");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.ConSection", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.ConSection ret = new it.bz.tis.sasabus.backend.shared.travelplanner.ConSection();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.ConSection").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.ConSection", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // Journey
            if ((value = structure.property("Journey")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ConSection)obj).Journey = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  arr.open();        
                  it.bz.tis.sasabus.backend.shared.travelplanner.Journey[] arrayList = new it.bz.tis.sasabus.backend.shared.travelplanner.Journey[arr.length()];       
                  for (int i = 0; i < arrayList.length; i++) {                       
                     value = arr.nextItem();                                       
                     if (value.isNull())                                           
                        arrayList[i] = null;                                       
                     else                                                          
                     {                                                                   
                        bz.davide.dmxmljson.unmarshalling.Structure tmpStructure = value.structure();
                        String refid = tmpStructure.getRefId();    
                        if (refid != null)                              
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.Journey)(identities.get(refid));                                                
                        else {
                           Object o = newInstance(tmpStructure.getRuntimeClassName("Journey"));              
                           internalUnmarschall(tmpStructure, o.getClass().getName(), o, identities); 
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.Journey)(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  arr.close();        
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ConSection)obj).Journey = arrayList;
               }
            // Walk
            if ((value = structure.property("Walk")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ConSection)obj).Walk = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  arr.open();        
                  it.bz.tis.sasabus.backend.shared.travelplanner.Walk[] arrayList = new it.bz.tis.sasabus.backend.shared.travelplanner.Walk[arr.length()];       
                  for (int i = 0; i < arrayList.length; i++) {                       
                     value = arr.nextItem();                                       
                     if (value.isNull())                                           
                        arrayList[i] = null;                                       
                     else                                                          
                     {                                                                   
                        bz.davide.dmxmljson.unmarshalling.Structure tmpStructure = value.structure();
                        String refid = tmpStructure.getRefId();    
                        if (refid != null)                              
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.Walk)(identities.get(refid));                                                
                        else {
                           Object o = newInstance(tmpStructure.getRuntimeClassName("Walk"));              
                           internalUnmarschall(tmpStructure, o.getClass().getName(), o, identities); 
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.Walk)(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  arr.close();        
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.ConSection)obj).Walk = arrayList;
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.Arrival", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.Arrival>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.Arrival  ret){
            // BasicStop
            if (ret.BasicStop != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.Arrival.BasicStop");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.Arrival", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.Arrival ret = new it.bz.tis.sasabus.backend.shared.travelplanner.Arrival();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.Arrival").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.Arrival", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // BasicStop
            if ((value = structure.property("BasicStop")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Arrival)obj).BasicStop = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.Arrival)obj).BasicStop = (it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("BasicStop"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.Arrival)obj).BasicStop = (it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop)o;
                  }
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.Departure", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.Departure>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.Departure  ret){
            // BasicStop
            if (ret.BasicStop != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.Departure.BasicStop");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.Departure", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.Departure ret = new it.bz.tis.sasabus.backend.shared.travelplanner.Departure();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.Departure").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.Departure", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // BasicStop
            if ((value = structure.property("BasicStop")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Departure)obj).BasicStop = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.Departure)obj).BasicStop = (it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("BasicStop"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.Departure)obj).BasicStop = (it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop)o;
                  }
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.Duration", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.Duration>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.Duration  ret){
            // Time
            if (ret.Time != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.Duration.Time");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.Duration", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.Duration ret = new it.bz.tis.sasabus.backend.shared.travelplanner.Duration();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.Duration").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.Duration", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // Time
            if ((value = structure.property("Time")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Duration)obj).Time = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Duration)obj).Time = value.string();
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.Journey", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.Journey>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.Journey  ret){
            // JourneyAttributeList
            if (ret.JourneyAttributeList != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.Journey.JourneyAttributeList");
            // PassList
            if (ret.PassList != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.Journey.PassList");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.Journey", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.Journey ret = new it.bz.tis.sasabus.backend.shared.travelplanner.Journey();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.Journey").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.Journey", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // JourneyAttributeList
            if ((value = structure.property("JourneyAttributeList")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Journey)obj).JourneyAttributeList = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.Journey)obj).JourneyAttributeList = (it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttributeList)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("JourneyAttributeList"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.Journey)obj).JourneyAttributeList = (it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttributeList)o;
                  }
               }
            // PassList
            if ((value = structure.property("PassList")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Journey)obj).PassList = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.Journey)obj).PassList = (it.bz.tis.sasabus.backend.shared.travelplanner.PassList)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("PassList"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.Journey)obj).PassList = (it.bz.tis.sasabus.backend.shared.travelplanner.PassList)o;
                  }
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.Walk", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.Walk>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.Walk  ret){
            // Duration
            if (ret.Duration != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.Walk.Duration");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.Walk", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.Walk ret = new it.bz.tis.sasabus.backend.shared.travelplanner.Walk();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.Walk").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.Walk", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // Duration
            if ((value = structure.property("Duration")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Walk)obj).Duration = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.Walk)obj).Duration = (it.bz.tis.sasabus.backend.shared.travelplanner.WalkDuration)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("WalkDuration"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.Walk)obj).Duration = (it.bz.tis.sasabus.backend.shared.travelplanner.WalkDuration)o;
                  }
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop  ret){
            // Arr
            if (ret.Arr != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop.Arr");
            // Dep
            if (ret.Dep != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop.Dep");
            // Station
            if (ret.Station != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop.Station");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop ret = new it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // Arr
            if ((value = structure.property("Arr")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop)obj).Arr = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop)obj).Arr = (it.bz.tis.sasabus.backend.shared.travelplanner.DepArr)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("DepArr"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop)obj).Arr = (it.bz.tis.sasabus.backend.shared.travelplanner.DepArr)o;
                  }
               }
            // Dep
            if ((value = structure.property("Dep")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop)obj).Dep = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop)obj).Dep = (it.bz.tis.sasabus.backend.shared.travelplanner.DepArr)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("DepArr"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop)obj).Dep = (it.bz.tis.sasabus.backend.shared.travelplanner.DepArr)o;
                  }
               }
            // Station
            if ((value = structure.property("Station")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop)obj).Station = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop)obj).Station = (it.bz.tis.sasabus.backend.shared.travelplanner.Station)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Station"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop)obj).Station = (it.bz.tis.sasabus.backend.shared.travelplanner.Station)o;
                  }
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttributeList", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttributeList>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttributeList  ret){
            // JourneyAttribute
            if (ret.JourneyAttribute != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttributeList.JourneyAttribute");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttributeList", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttributeList ret = new it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttributeList();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttributeList").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttributeList", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // JourneyAttribute
            if ((value = structure.property("JourneyAttribute")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttributeList)obj).JourneyAttribute = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  arr.open();        
                  it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttribute[] arrayList = new it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttribute[arr.length()];       
                  for (int i = 0; i < arrayList.length; i++) {                       
                     value = arr.nextItem();                                       
                     if (value.isNull())                                           
                        arrayList[i] = null;                                       
                     else                                                          
                     {                                                                   
                        bz.davide.dmxmljson.unmarshalling.Structure tmpStructure = value.structure();
                        String refid = tmpStructure.getRefId();    
                        if (refid != null)                              
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttribute)(identities.get(refid));                                                
                        else {
                           Object o = newInstance(tmpStructure.getRuntimeClassName("JourneyAttribute"));              
                           internalUnmarschall(tmpStructure, o.getClass().getName(), o, identities); 
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttribute)(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  arr.close();        
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttributeList)obj).JourneyAttribute = arrayList;
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.PassList", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.PassList>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.PassList  ret){
            // BasicStop
            if (ret.BasicStop != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.PassList.BasicStop");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.PassList", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.PassList ret = new it.bz.tis.sasabus.backend.shared.travelplanner.PassList();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.PassList").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.PassList", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // BasicStop
            if ((value = structure.property("BasicStop")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.PassList)obj).BasicStop = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  arr.open();        
                  it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop[] arrayList = new it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop[arr.length()];       
                  for (int i = 0; i < arrayList.length; i++) {                       
                     value = arr.nextItem();                                       
                     if (value.isNull())                                           
                        arrayList[i] = null;                                       
                     else                                                          
                     {                                                                   
                        bz.davide.dmxmljson.unmarshalling.Structure tmpStructure = value.structure();
                        String refid = tmpStructure.getRefId();    
                        if (refid != null)                              
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop)(identities.get(refid));                                                
                        else {
                           Object o = newInstance(tmpStructure.getRuntimeClassName("BasicStop"));              
                           internalUnmarschall(tmpStructure, o.getClass().getName(), o, identities); 
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop)(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  arr.close();        
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.PassList)obj).BasicStop = arrayList;
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.WalkDuration", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.WalkDuration>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.WalkDuration  ret){
            // Time
            if (ret.Time != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.WalkDuration.Time");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.WalkDuration", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.WalkDuration ret = new it.bz.tis.sasabus.backend.shared.travelplanner.WalkDuration();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.WalkDuration").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.WalkDuration", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // Time
            if ((value = structure.property("Time")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.WalkDuration)obj).Time = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.WalkDuration)obj).Time = value.string();
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.DepArr", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.DepArr>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.DepArr  ret){
            // Time
            if (ret.Time != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.DepArr.Time");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.DepArr", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.DepArr ret = new it.bz.tis.sasabus.backend.shared.travelplanner.DepArr();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.DepArr").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.DepArr", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // Time
            if ((value = structure.property("Time")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.DepArr)obj).Time = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.DepArr)obj).Time = value.string();
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttribute", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttribute>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttribute  ret){
            // Attribute
            if (ret.Attribute != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttribute.Attribute");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttribute", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttribute ret = new it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttribute();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttribute").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttribute", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // Attribute
            if ((value = structure.property("Attribute")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttribute)obj).Attribute = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttribute)obj).Attribute = (it.bz.tis.sasabus.backend.shared.travelplanner.Attribute)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Attribute"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttribute)obj).Attribute = (it.bz.tis.sasabus.backend.shared.travelplanner.Attribute)o;
                  }
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.Attribute", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.Attribute>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.Attribute  ret){
            // AttributeVariant
            if (ret.AttributeVariant != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.Attribute.AttributeVariant");
            // type
            if (ret.type != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.Attribute.type");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.Attribute", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.Attribute ret = new it.bz.tis.sasabus.backend.shared.travelplanner.Attribute();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.Attribute").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.Attribute", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // AttributeVariant
            if ((value = structure.property("AttributeVariant")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Attribute)obj).AttributeVariant = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  arr.open();        
                  it.bz.tis.sasabus.backend.shared.travelplanner.AttributeVariant[] arrayList = new it.bz.tis.sasabus.backend.shared.travelplanner.AttributeVariant[arr.length()];       
                  for (int i = 0; i < arrayList.length; i++) {                       
                     value = arr.nextItem();                                       
                     if (value.isNull())                                           
                        arrayList[i] = null;                                       
                     else                                                          
                     {                                                                   
                        bz.davide.dmxmljson.unmarshalling.Structure tmpStructure = value.structure();
                        String refid = tmpStructure.getRefId();    
                        if (refid != null)                              
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.AttributeVariant)(identities.get(refid));                                                
                        else {
                           Object o = newInstance(tmpStructure.getRuntimeClassName("AttributeVariant"));              
                           internalUnmarschall(tmpStructure, o.getClass().getName(), o, identities); 
                           arrayList[i] = (it.bz.tis.sasabus.backend.shared.travelplanner.AttributeVariant)(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  arr.close();        
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Attribute)obj).AttributeVariant = arrayList;
               }
            // type
            if ((value = structure.property("type")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Attribute)obj).type = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.Attribute)obj).type = value.string();
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("it.bz.tis.sasabus.backend.shared.travelplanner.AttributeVariant", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<it.bz.tis.sasabus.backend.shared.travelplanner.AttributeVariant>() {
         @Override public void check(it.bz.tis.sasabus.backend.shared.travelplanner.AttributeVariant  ret){
            // Text
            if (ret.Text != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.AttributeVariant.Text");
            // type
            if (ret.type != null)
               throw new RuntimeException("The constructor initialized the field it.bz.tis.sasabus.backend.shared.travelplanner.AttributeVariant.type");
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.AttributeVariant", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            it.bz.tis.sasabus.backend.shared.travelplanner.AttributeVariant ret = new it.bz.tis.sasabus.backend.shared.travelplanner.AttributeVariant();
            emptyObjectCheck.get("it.bz.tis.sasabus.backend.shared.travelplanner.AttributeVariant").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.AttributeVariant", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // Text
            if ((value = structure.property("Text")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.AttributeVariant)obj).Text = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.AttributeVariant)obj).Text = value.string();
               }
            // type
            if ((value = structure.property("type")) != null)
               if (value.isNull())
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.AttributeVariant)obj).type = null;
               else
               {
                  ((it.bz.tis.sasabus.backend.shared.travelplanner.AttributeVariant)obj).type = value.string();
               }
            structure.close();
         }
      });

   }
}
