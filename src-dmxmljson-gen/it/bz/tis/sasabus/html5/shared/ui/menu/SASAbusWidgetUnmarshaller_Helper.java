/*********************************************************************************
 *                                                                               *
 * WARNING: File automatically generated by DMXmlJson. DON'T CHANGE IT manually! *
 *                                                                               *
 *********************************************************************************/

package it.bz.tis.sasabus.html5.shared.ui.menu;


public class SASAbusWidgetUnmarshaller_Helper extends it.bz.tis.sasabus.html5.shared.ui.map.SASAbusWidgetUnmarshaller_Helper
{
   protected SASAbusWidgetUnmarshaller_Helper()
   {
      this.putInstanceFactory("it.bz.tis.sasabus.html5.shared.ui.menu.MenuItem", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.html5.shared.ui.menu.MenuItem((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.html5.shared.ui.menu.MenuItem", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.DMClickableFlowPanel", obj, identities);
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.html5.shared.ui.menu.MenuAboutClickHandler", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.html5.shared.ui.menu.MenuAboutClickHandler((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.html5.shared.ui.menu.MenuAboutClickHandler", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // aboutPanel
            if ((value = structure.property("aboutPanel")) != null)
               if (value.isNull())
                  ((MenuAboutClickHandler)obj).aboutPanel = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((MenuAboutClickHandler)obj).aboutPanel = (it.bz.tis.sasabus.html5.shared.ui.AboutPanel)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("AboutPanel"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((MenuAboutClickHandler)obj).aboutPanel = (it.bz.tis.sasabus.html5.shared.ui.AboutPanel)o;
                  }
               }
            // menu
            if ((value = structure.property("menu")) != null)
               if (value.isNull())
                  ((MenuAboutClickHandler)obj).menu = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((MenuAboutClickHandler)obj).menu = (it.bz.tis.sasabus.html5.shared.ui.menu.Menu)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Menu"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((MenuAboutClickHandler)obj).menu = (it.bz.tis.sasabus.html5.shared.ui.menu.Menu)o;
                  }
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.html5.shared.ui.menu.MenuMapClickHandler", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.html5.shared.ui.menu.MenuMapClickHandler((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.html5.shared.ui.menu.MenuMapClickHandler", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // areaList
            if ((value = structure.property("areaList")) != null)
               if (value.isNull())
                  ((MenuMapClickHandler)obj).areaList = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((MenuMapClickHandler)obj).areaList = (it.bz.tis.sasabus.backend.shared.AreaList)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("AreaList"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((MenuMapClickHandler)obj).areaList = (it.bz.tis.sasabus.backend.shared.AreaList)o;
                  }
               }
            // map
            if ((value = structure.property("map")) != null)
               if (value.isNull())
                  ((MenuMapClickHandler)obj).map = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((MenuMapClickHandler)obj).map = (it.bz.tis.sasabus.html5.shared.ui.map.SASAbusMap)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("SASAbusMap"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((MenuMapClickHandler)obj).map = (it.bz.tis.sasabus.html5.shared.ui.map.SASAbusMap)o;
                  }
               }
            // menu
            if ((value = structure.property("menu")) != null)
               if (value.isNull())
                  ((MenuMapClickHandler)obj).menu = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((MenuMapClickHandler)obj).menu = (it.bz.tis.sasabus.html5.shared.ui.menu.Menu)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Menu"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((MenuMapClickHandler)obj).menu = (it.bz.tis.sasabus.html5.shared.ui.menu.Menu)o;
                  }
               }
            // navigationPanel
            if ((value = structure.property("navigationPanel")) != null)
               if (value.isNull())
                  ((MenuMapClickHandler)obj).navigationPanel = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((MenuMapClickHandler)obj).navigationPanel = (bz.davide.dmweb.shared.DMHashNavigationPanel)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("DMHashNavigationPanel"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((MenuMapClickHandler)obj).navigationPanel = (bz.davide.dmweb.shared.DMHashNavigationPanel)o;
                  }
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.html5.shared.ui.menu.MenuNewsClickHandler", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.html5.shared.ui.menu.MenuNewsClickHandler((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.html5.shared.ui.menu.MenuNewsClickHandler", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // menu
            if ((value = structure.property("menu")) != null)
               if (value.isNull())
                  ((MenuNewsClickHandler)obj).menu = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((MenuNewsClickHandler)obj).menu = (it.bz.tis.sasabus.html5.shared.ui.menu.Menu)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Menu"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((MenuNewsClickHandler)obj).menu = (it.bz.tis.sasabus.html5.shared.ui.menu.Menu)o;
                  }
               }
            // navigationPanel
            if ((value = structure.property("navigationPanel")) != null)
               if (value.isNull())
                  ((MenuNewsClickHandler)obj).navigationPanel = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((MenuNewsClickHandler)obj).navigationPanel = (bz.davide.dmweb.shared.DMHashNavigationPanel)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("DMHashNavigationPanel"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((MenuNewsClickHandler)obj).navigationPanel = (bz.davide.dmweb.shared.DMHashNavigationPanel)o;
                  }
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.html5.shared.ui.menu.MenuAreaLinesClickHandler", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.html5.shared.ui.menu.MenuAreaLinesClickHandler((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.html5.shared.ui.menu.MenuAreaLinesClickHandler", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // areaList
            if ((value = structure.property("areaList")) != null)
               if (value.isNull())
                  ((MenuAreaLinesClickHandler)obj).areaList = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((MenuAreaLinesClickHandler)obj).areaList = (it.bz.tis.sasabus.backend.shared.AreaList)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("AreaList"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((MenuAreaLinesClickHandler)obj).areaList = (it.bz.tis.sasabus.backend.shared.AreaList)o;
                  }
               }
            // map
            if ((value = structure.property("map")) != null)
               if (value.isNull())
                  ((MenuAreaLinesClickHandler)obj).map = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((MenuAreaLinesClickHandler)obj).map = (it.bz.tis.sasabus.html5.shared.ui.map.SASAbusMap)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("SASAbusMap"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((MenuAreaLinesClickHandler)obj).map = (it.bz.tis.sasabus.html5.shared.ui.map.SASAbusMap)o;
                  }
               }
            // menu
            if ((value = structure.property("menu")) != null)
               if (value.isNull())
                  ((MenuAreaLinesClickHandler)obj).menu = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((MenuAreaLinesClickHandler)obj).menu = (it.bz.tis.sasabus.html5.shared.ui.menu.Menu)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Menu"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((MenuAreaLinesClickHandler)obj).menu = (it.bz.tis.sasabus.html5.shared.ui.menu.Menu)o;
                  }
               }
            // navigationPanel
            if ((value = structure.property("navigationPanel")) != null)
               if (value.isNull())
                  ((MenuAreaLinesClickHandler)obj).navigationPanel = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((MenuAreaLinesClickHandler)obj).navigationPanel = (bz.davide.dmweb.shared.DMHashNavigationPanel)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("DMHashNavigationPanel"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((MenuAreaLinesClickHandler)obj).navigationPanel = (bz.davide.dmweb.shared.DMHashNavigationPanel)o;
                  }
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.html5.shared.ui.menu.MenuSettingsClickHandler", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.html5.shared.ui.menu.MenuSettingsClickHandler((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.html5.shared.ui.menu.MenuSettingsClickHandler", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // menu
            if ((value = structure.property("menu")) != null)
               if (value.isNull())
                  ((MenuSettingsClickHandler)obj).menu = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((MenuSettingsClickHandler)obj).menu = (it.bz.tis.sasabus.html5.shared.ui.menu.Menu)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Menu"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((MenuSettingsClickHandler)obj).menu = (it.bz.tis.sasabus.html5.shared.ui.menu.Menu)o;
                  }
               }
            // navigationPanel
            if ((value = structure.property("navigationPanel")) != null)
               if (value.isNull())
                  ((MenuSettingsClickHandler)obj).navigationPanel = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((MenuSettingsClickHandler)obj).navigationPanel = (bz.davide.dmweb.shared.DMHashNavigationPanel)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("DMHashNavigationPanel"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((MenuSettingsClickHandler)obj).navigationPanel = (bz.davide.dmweb.shared.DMHashNavigationPanel)o;
                  }
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.html5.shared.ui.menu.Menu", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.html5.shared.ui.menu.Menu((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.html5.shared.ui.menu.Menu", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.DMFlowPanel", obj, identities);
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // about
            if ((value = structure.property("about")) != null)
               if (value.isNull())
                  ((Menu)obj).about = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Menu)obj).about = (it.bz.tis.sasabus.html5.shared.ui.menu.MenuItem)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("MenuItem"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Menu)obj).about = (it.bz.tis.sasabus.html5.shared.ui.menu.MenuItem)o;
                  }
               }
            // aboutPanel
            if ((value = structure.property("aboutPanel")) != null)
               if (value.isNull())
                  ((Menu)obj).aboutPanel = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Menu)obj).aboutPanel = (it.bz.tis.sasabus.html5.shared.ui.AboutPanel)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("AboutPanel"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Menu)obj).aboutPanel = (it.bz.tis.sasabus.html5.shared.ui.AboutPanel)o;
                  }
               }
            // areasAndLine
            if ((value = structure.property("areasAndLine")) != null)
               if (value.isNull())
                  ((Menu)obj).areasAndLine = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Menu)obj).areasAndLine = (it.bz.tis.sasabus.html5.shared.ui.menu.MenuItem)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("MenuItem"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Menu)obj).areasAndLine = (it.bz.tis.sasabus.html5.shared.ui.menu.MenuItem)o;
                  }
               }
            // favourites
            if ((value = structure.property("favourites")) != null)
               if (value.isNull())
                  ((Menu)obj).favourites = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Menu)obj).favourites = (it.bz.tis.sasabus.html5.shared.ui.menu.MenuItem)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("MenuItem"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Menu)obj).favourites = (it.bz.tis.sasabus.html5.shared.ui.menu.MenuItem)o;
                  }
               }
            // map
            if ((value = structure.property("map")) != null)
               if (value.isNull())
                  ((Menu)obj).map = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Menu)obj).map = (it.bz.tis.sasabus.html5.shared.ui.map.SASAbusMap)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("SASAbusMap"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Menu)obj).map = (it.bz.tis.sasabus.html5.shared.ui.map.SASAbusMap)o;
                  }
               }
            // mapItem
            if ((value = structure.property("mapItem")) != null)
               if (value.isNull())
                  ((Menu)obj).mapItem = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Menu)obj).mapItem = (it.bz.tis.sasabus.html5.shared.ui.menu.MenuItem)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("MenuItem"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Menu)obj).mapItem = (it.bz.tis.sasabus.html5.shared.ui.menu.MenuItem)o;
                  }
               }
            // menuOpen
            if ((value = structure.property("menuOpen")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((Menu)obj).menuOpen = value.booleanValue();
               }
            // more
            if ((value = structure.property("more")) != null)
               if (value.isNull())
                  ((Menu)obj).more = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Menu)obj).more = (it.bz.tis.sasabus.html5.shared.ui.menu.MenuItem)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("MenuItem"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Menu)obj).more = (it.bz.tis.sasabus.html5.shared.ui.menu.MenuItem)o;
                  }
               }
            // moreClickHandler
            if ((value = structure.property("moreClickHandler")) != null)
               if (value.isNull())
                  ((Menu)obj).moreClickHandler = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Menu)obj).moreClickHandler = (it.bz.tis.sasabus.html5.shared.ui.menu.MenuMoreClickHandler)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("MenuMoreClickHandler"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Menu)obj).moreClickHandler = (it.bz.tis.sasabus.html5.shared.ui.menu.MenuMoreClickHandler)o;
                  }
               }
            // moreMenuItems
            if ((value = structure.property("moreMenuItems")) != null)
               if (value.isNull())
                  ((Menu)obj).moreMenuItems = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Menu)obj).moreMenuItems = (bz.davide.dmweb.shared.DMFlowPanel)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("DMFlowPanel"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Menu)obj).moreMenuItems = (bz.davide.dmweb.shared.DMFlowPanel)o;
                  }
               }
            // navigationPanel
            if ((value = structure.property("navigationPanel")) != null)
               if (value.isNull())
                  ((Menu)obj).navigationPanel = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Menu)obj).navigationPanel = (bz.davide.dmweb.shared.DMHashNavigationPanel)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("DMHashNavigationPanel"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Menu)obj).navigationPanel = (bz.davide.dmweb.shared.DMHashNavigationPanel)o;
                  }
               }
            // news
            if ((value = structure.property("news")) != null)
               if (value.isNull())
                  ((Menu)obj).news = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Menu)obj).news = (it.bz.tis.sasabus.html5.shared.ui.menu.MenuItem)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("MenuItem"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Menu)obj).news = (it.bz.tis.sasabus.html5.shared.ui.menu.MenuItem)o;
                  }
               }
            // routing
            if ((value = structure.property("routing")) != null)
               if (value.isNull())
                  ((Menu)obj).routing = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Menu)obj).routing = (it.bz.tis.sasabus.html5.shared.ui.menu.MenuItem)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("MenuItem"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Menu)obj).routing = (it.bz.tis.sasabus.html5.shared.ui.menu.MenuItem)o;
                  }
               }
            // search
            if ((value = structure.property("search")) != null)
               if (value.isNull())
                  ((Menu)obj).search = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Menu)obj).search = (it.bz.tis.sasabus.html5.shared.ui.menu.MenuItem)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("MenuItem"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Menu)obj).search = (it.bz.tis.sasabus.html5.shared.ui.menu.MenuItem)o;
                  }
               }
            // sendFeedback
            if ((value = structure.property("sendFeedback")) != null)
               if (value.isNull())
                  ((Menu)obj).sendFeedback = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Menu)obj).sendFeedback = (it.bz.tis.sasabus.html5.shared.ui.menu.MenuItem)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("MenuItem"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Menu)obj).sendFeedback = (it.bz.tis.sasabus.html5.shared.ui.menu.MenuItem)o;
                  }
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.html5.shared.ui.menu.MenuMoreClickHandler", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.html5.shared.ui.menu.MenuMoreClickHandler((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.html5.shared.ui.menu.MenuMoreClickHandler", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // moreMenuItem
            if ((value = structure.property("moreMenuItem")) != null)
               if (value.isNull())
                  ((MenuMoreClickHandler)obj).moreMenuItem = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((MenuMoreClickHandler)obj).moreMenuItem = (bz.davide.dmweb.shared.DMFlowPanel)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("DMFlowPanel"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((MenuMoreClickHandler)obj).moreMenuItem = (bz.davide.dmweb.shared.DMFlowPanel)o;
                  }
               }
            // moreOpen
            if ((value = structure.property("moreOpen")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((MenuMoreClickHandler)obj).moreOpen = value.booleanValue();
               }
         }
      });

   }
}
